name: Azure Pipelines

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
- main

# ToDo: Replace the agent pool name, if you are using Udacity Cloud lab. 
# Otherwise, comment out the line below. 
pool: Default

variables:
  python.version: '3.7.6'
  # ToDo: Replace the service connection name as used in the DevOps project settings
  azureServiceConnectionId: 'd1ce9d62-8323-4a3b-b748-fbcd04b51435'
  azureSubscription: 'Finaltesting'
  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  # Environment name
  environmentName: 'testing'

stages:
#--------------------------------------------#  
# BUILD STAGE
#--------------------------------------------#    
- stage: Build
  jobs:
  - job: BuildInfrastructure
    steps:
    # --------------------------------------------#  
    # Use Terraform to create the Infrastructure      
    # Install Terraform on the pipeline agent 
    - task: TerraformInstaller@0
      displayName: 'Terrafom installation'
      inputs:
        terraformVersion: '1.3.1'
    
    # Run Terraform Init on the pipeline agent 
    # ToDo: Replace the resource group name, storage account name, and container name below
    - task: TerraformCLI@0
      displayName: 'Terrafom init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        # backendServiceArm: '$(azureServiceConnectionId)'
        backendServiceArm: '$(azureSubscription)'
        backendAzureRmResourceGroupName: 'tfstate'
        backendAzureRmStorageAccountName: 'tfstate289024787'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'terraform.tfstate'

    # ToDo: Run Terraform Validate    
    - task: TerraformCLI@0
      displayName: Terraform validate
      inputs:
        provider: 'azurerm'
        command: 'validate'

    # OPTIONAL - This step is needed only if your Terraform VM uses an SSH key pair for login and you want your pipeline agent to connect to it. 
    # Generate an SSH key pair in your local/AZ Cloud shell. Use the public key in the Terraform VM module. 
    # Install public key and private key file to the pipeline agent, using the task below. 
    # ToDo: Change the inputs value below
    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: 'htnb' # variable value
        sshPublicKey: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC4dkv3Rbek+FgseRu9X184Vve68o9dtK7ytBNHrUbOt1jARddOUAQpe6JReoz5u3YeAaFdM0pl1byhwixPowvlW8AhN5Kk2FqSjbyUJJYjK6hlzSKQgLUgEtcWCS97rexDk/N5yEgGxGqvaPo1QedcXAwnfvjMlpZz4RINES1ETJx86Hy6la6vnWej3K4s8+tu3jIRgW8YKMcsglHfU1zxFiChFofQmNSZ//9qTrWfaPA4pKwN0TP9RAG7KSxUJTvgsTdSOm/hOyn8TjvCJgb1GwnISLbH7lTXXyVL9AKZhmLHNHkKbtel/9ToLwCQB/b4ltPOkboLv7jxdwsj4SvtYUOhyfnZOfdG/SONpFPy8cpxb3WhzFdDbkUXSL2RuHFOFKNihxM6+BgYYCXzVSnWKulJcNcOafAK1aGshJAToYRSswb7iv+sVZy1AX0Xud8z4I/ruc+v1ysx5Au4eqDsoOkxoyTLpckDe9rGrxAziVxsrpxG/2uURKEBNeooPjk= omotolaolowosule@wired-and-hallnet-in-wireless-232-79.lut.ac.uk        '            # variable value
        sshKeySecureFile: 'id_rsa' # Use secure file feature in the pipeline library UI to save the "id_rsa" file, as mentioned here: https://learn.microsoft.com/en-us/azure/devops/pipelines/library/secure-files?view=azure-devops#add-a-secure-file
    
    - task: DownloadSecureFile@1
      name: udacity_public_key
      displayName: 
      inputs:
        secureFile: "id_rsa.pub"
        
    - script: |
        echo Installing $(udacity_public_key.secureFilePath) to the trusted CA directory...
        sudo chown root:root $(udacity_public_key.secureFilePath)
        sudo chmod a+r $(udacity_public_key.secureFilePath)
        sudo ln -s -t /etc/ssl/certs/ $(udacity_public_key.secureFilePath)        
    
    # Run Terraform Apply
    # ToDo: Change the workingDirectory path, as applicable to you
    - task: TerraformCLI@0
      displayName: Terraform apply
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(azureSubscription)'

    # ToDo: Change the workingDirectory path, as applicable to you
    # Destroy the resources in Azure by running a separate pipeline. 
    # - task: TerraformCLI@0
    #   displayName: Terraform destroy
    #   inputs:
    #     provider: 'azurerm'
    #     command: 'destroy'
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
    #     environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

#--------------------------------------------#    
    # Postman - Install Newman    
    # ToDo: Update the command and verify the working directory
  - job: IntegrationTest
    displayName: Integration Tests
    steps:
    - task: CmdLine@2
      displayName: Install Newman
      inputs:
        script: 'sudo npm install -g newman'
        workingDirectory: $(System.DefaultWorkingDirectory)
    # Postman Data Validation Test Suite    
    # ToDo: Verify the working directory and the newman scripts
    - task: CmdLine@2
      displayName: Run Data Validation Tests
      continueOnError: true
      inputs:
        script: 'newman run Validation_Test.postman_collection.json -e Environment.postman_environment.json --bail newman -x --reporters cli,junit --reporter-junit-export Results/ValidationTests.xml'
        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
    # Postman Regression Test Suite    
    # ToDo: Update the command and verify the working directory
    - task: CmdLine@2
      displayName: Run Regression Tests
      continueOnError: true
      inputs:
        script: 'newman run Regression_Test.postman_collection.json -e Environment.postman_environment.json --bail newman -x --reporters cli,junit --reporter-junit-export Results/RegressionTests.xml'
        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
    # Postman - Publish Results 
    # ToDo: Complete the task as explained here: https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/test/publish-test-results?view=azure-devops&tabs=trx%2Cyaml#yaml-snippet
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '$(System.DefaultWorkingDirectory)/automatedtesting/postman/Results/**Tests.xml'
        searchFolder: '$(System.DefaultWorkingDirectory)'
        mergeTestResults: true
        testRunTitle: Publish Test Results

    #--------------------------------------------#
    # Selenium (UI) Test Suite - Archive the package  
    # "ArchiveFiles@2" picks up the web package and archives it.
  - job: BuildArtifact
    displayName: Build Artifacts
    steps:
    - task: ArchiveFiles@2
      displayName: 'Archive UI Tests'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip'
    # Selenium Test Suite - Publish the package  
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip   # Same as the archiveFile artifact above. 
      displayName: 'Upload Package'
      artifact: drop-uitests

    #--------------------------------------------#    
    # FakeRestAPI - Archive
    # ToDo: Complete the ArchiveFiles@2 task and publish step 
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/fakerestapi-$(Build.BuildId).zip'
        verbose: true
    # FakeRestAPI - Publish    
    - publish: $(Build.ArtifactStagingDirectory)/fakerestapi-$(Build.BuildId).zip
      displayName: Publish fakerestapi package
      artifact: drop-fakerestapi

    #--------------------------------------------#  
    # JMeter (Performance) Test Suite - Archive
    # ToDo: Complete the ArchiveFiles@2 task and publish step 
  - job: PerformanceTests
    dependsOn: BuildArtifact
    # pool:
    #   vmImage: 'Default'
    steps:
    - bash: |
        sudo apt-get install openjdk-11-jre-headless -y
        java -version
        wget https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.5.tgz -O jmeter.tgz
        tar xzvf jmeter.tgz
        apache-jmeter-5.5/bin/jmeter --version
        # create log directory
        mkdir -p log/jmeter
        pwd
        ls -la
      displayName: Install JMeter
    - bash: |
        apache-jmeter-5.5/bin/jmeter -n -t automatedtesting/jmeter/Starter.jmx \
                                   -l log/jmeter/test-result.csv \
                                   -e -f -o log/jmeter/test-html-report \
                                   -j log/jmeter/jmeter-test.log
      displayName: JMeter test
    - task: ArchiveFiles@2
      displayName: 'Archive PerformanceTestSuite'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/log/jmeter/test-html-report'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(System.DefaultWorkingDirectory)/log/jmeter/test-html-report-$(Build.BuildId).zip'
    # JMeter Test Suite - Publish    
    - publish: 
      displayName: Publish JMeter tests
      artifact: 'drop-jmeter-tests'  
    

#--------------------------------------------#  
# DEPLOYMENT STAGE
#--------------------------------------------#    
- stage: Deploy
  jobs:
  #--------------------------------------------#  
  # Deploy FakeRestAPI Web App
  # ToDo: Provide <environment name> you created in your DevOps project
  - deployment: FakeRestAPI
    pool:
      vmImage: 'Default'      
    environment: '$(environmentName)'   # ToDo
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              # azureSubscription: '$(azureServiceConnectionId)'
              azureSubscription: '$(azureSubscription)'
              appName: udacity-azuredevops-fakerestapi
              appType: webApp
              package: '$(Pipeline.Workspace)/drop-fakerestapi/fakerestapi-$(Build.BuildId).zip'   # ToDo: Use the published zip artifact. 
              
  #--------------------------------------------#  
  # Selenium | Functional UI Tests
  # ToDo: 
  - deployment: VMDeploy
    displayName: Selenium Tests
    environment:
      name: 'testing'
      resourceType: VirtualMachine
      tags: udacity-selenium
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop-uitests     # ToDo: Quality Releases
            
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |           
                # sudo apt-get upgrade -y
                # sudo apt-get install python3-pip -y
                # sudo apt-get install unzip -y
                # sudo apt-get install -y chromium-browser
                # pip3 install selenium

                unzip -o $(Pipeline.Workspace)/drop-uitests/$(Build.BuildId)-uitests.zip -d .
                sudo mkdir -p /var/log/selenium
                sudo chmod 664 /var/log/selenium
                source ~/.selenium-venv/bin/activate
                python -u login.py | sudo tee -a /var/log/selenium/selenium-test.log
                cd $(System.DefaultWorkingDirectory)
                mkdir -p log/selenium
                pwd
                sudo cp /var/log/selenium/selenium-test.log log/selenium/selenium-test.log
                ls -la
                
